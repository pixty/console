package model

import (
	"fmt"

	"github.com/pixty/console/common"
)

type (
	// Organization DO.
	Organization struct {
		Id   int64
		Name string
	}

	// FieldInfo - describes a field of profile metadata
	FieldInfo struct {
		Id          int64
		OrgId       int64
		FieldType   string
		DisplayName string
	}

	// Type of the field please see FLD_TYPE_ constants below
	FieldType string

	// User DO
	User struct {
		Id    int64
		Login string
	}

	// Camera DO
	Camera struct {
		Id        string // friendly camera name
		OrgId     int64
		SecretKey string
	}

	// A person DO
	Person struct {
		// Person id is generated by Frame Processor
		Id         string
		CamId      string
		LastSeenAt uint64
		ProfileId  int64
		PictureId  string // avatar
		MatchGroup int64
	}

	// Point on a 2D plane
	Point struct {
		X int `json:"x"`
		Y int `json:"y"`
	}

	// A rectangle on a 2D plane
	Rectangle struct {
		LeftTop     Point `json:"leftTop"`
		RightBottom Point `json:"rightBottom"`
	}

	// A size on 2D plane
	Size struct {
		Width  int `json:"Width" bson:"width"`
		Height int `json:"Height" bson:"height"`
	}

	// A face description DO
	Face struct {
		Id          int64
		SceneId     string
		PersonId    string
		CapturedAt  uint64
		ImageId     string
		Rect        Rectangle //composite, dao has transformations
		FaceImageId string
		V128D       common.V128D //composite, dao has transformations
	}

	// An organization profile's information
	Profile struct {
		Id        int64
		OrgId     int64
		PictureId string // avatar

		//Meta (composit one)
		Meta []*ProfileMeta
	}

	ProfileMeta struct {
		ProfileId int64
		FieldId   int64
		Value     string

		//Display Name can be populated for some certain ops
		DisplayName string
	}

	// Persister is an interface which provides an access to persistent layer
	Persister interface {
		GetMainPersister() MainPersister
		GetPartPersister(partId string) PartPersister
	}

	GenericPersister interface {
		// Executes provided SQL query
		ExecQuery(sqlQuery string, params ...interface{}) error
		// Executes SQL script which is in the provided file
		ExecScript(pathToFile string) error
	}

	// An transactional persister (has context dependant time)
	MainPersister interface {
		GenericPersister

		FindCameraById(camId string) (*Camera, error)

		// orgs
		InsertOrg(org Organization) (int64, error)
		GetFieldInfos(orgId int64) ([]*FieldInfo, error)
		InsertFieldInfo(fldInfo *FieldInfo) (int64, error)
		UpdateFiledInfo(fldInfo *FieldInfo) error
		DeleteFieldInfo(fldInfo *FieldInfo) error
	}

	// Partitioned persister
	PartPersister interface {
		GenericPersister

		// ==== Faces ====
		// returns Face by its Id, or error
		GetFaceById(pId int64) (*Face, error)
		FindFaces(fQuery *FacesQuery) ([]*Face, error)
		// insert new face, returns the new record id, or error, if it happens
		InsertFace(face *Face) (int64, error)
		InsertFaces(faces []*Face) error

		// ==== Persons ====
		// returns Person by its Id, or error
		GetPersonById(pId string) (*Person, error)
		FindPersons(pQuery *PersonsQuery) ([]*Person, error)
		// insert new person, returns the new record id, or error, if it happens
		InsertPerson(person *Person) error
		InsertPersons(persons []*Person) error
		UpdatePerson(person *Person) error
		UpdatePersonsLastSeenAt(pids []string, lastSeenAt uint64) error

		// ==== Profiles ====
		GetProfiles(prQuery *ProfileQuery) ([]*Profile, error)
		// Looking for profiles for requiested match groups
		// profileId -> mg
		GetProfilesByMGs(matchGroups []int64) (map[int64]int64, error)
	}

	FacesQuery struct {
		// Request faces for the list of persons
		PersonIds []string
		// Indicates to read short version (no V128D vectors) of faces
		Short bool
		Limit int
	}

	PersonsQuery struct {
		// Camera Id the request done for
		CamId string
		// The maximum allowable max time.
		MaxLastSeenAt common.Timestamp
		// Request only this persons (MaxLastSeenAt and Limit will be disregarded)
		PersonIds []string
		// How many to select
		Limit int
	}

	ProfileQuery struct {
		ProfileIds []int64
		// Indicates, that meta is not needed
		NoMeta bool
	}
)

// Known field types for profile fields description
const (
	FLD_TYPE_STRING FieldType = "string"
)

func (c *Camera) String() string {
	return fmt.Sprintf("{Id=%s, OrgId=%d, SecretKey=%s}", c.Id, c.OrgId, c.SecretKey)
}

func (q *PersonsQuery) String() string {
	return fmt.Sprintf("{CamId=%s, PersonsIds=%v, MaxLastSeenAt=%d, Limit=%d}", q.CamId, q.PersonIds, q.MaxLastSeenAt, q.Limit)
}

func (q *FacesQuery) String() string {
	return fmt.Sprintf("{PersonsIds=%v, Limit=%d}", q.PersonIds, q.Limit)
}

func (q *ProfileQuery) String() string {
	return fmt.Sprintf("{ProfileIds=%v}", q.ProfileIds)
}
